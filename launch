#!/usr/bin/bash
echo "Linux setup installer"

CDIR="$(pwd)"

repo_package_list=(
    # Reflector
    'reflector'

    # Core + Interpreters
    'zsh' 'python' 'perl' 'lua' 'ruby'
    'jre7-openjdk' 'jdk7-openjdk' 'jre8-openjdk' 'jdk8-openjdk' 'jre9-openjdk' 'jdk9-openjdk'
    'sudo' 'gksu' 'wget'

    # Drivers
    'pulseaudio' 'pulseaudio-alsa' 'alsa-utils'

    # Utilities
    'wmctrl' 'pamixer' 'rofi'

    # Graphical
    'xorg-server' 'lightdm' 'lightdm-gtk-greeter'
    'openbox' 'nitrogen' 'tint2' 'compton'
    'qt4' 'gtk2' 'gtk3'

    # Utilities
    'obconf' 'lxappearance' 'xfce4-screenshooter'
    'htop'

    # Terminals
    'xterm' 'rxvt-unicode' 'tmux'

    # Editors
    'emacs' 'leafpad' 'retext'

    # Media and applications
    'steam' 'vlc' 'eog' 'deluge'
    'thunar' 'gimp' 'inkscape'
    'teamspeak3' 'evince'

    # Themes and fonts
    'adapta-gtk-theme'
    'terminus-font' 'ttf-hack'
    'ttf-dejavu' 'ttf-droid' 'ttf-roboto'
    'noto-fonts' 'ttf-liberation' 'ttf-ubuntu-font-family'
    'ttf-freefont'

    # Wine
    'winetricks'
)

aur_package_list=(
    # Themes and fonts
    'adwaita-qt4' 'adwaita-qt5'
    'la-capitaine-icon-theme'
    'ttf-ms-fonts' 'ttf-vista-fonts'

    # Media and applications
    'spotify' 'pulseeffects' 'discord'

    # Wine
    'wine-gaming-nine'
)

package_exists() {
    pacman -Q "$1" > /dev/null 2>&1
    return "$?"
}

pacman_install() {
    if ! package_exists "$1"; then
        echo "> Installing official package $1..."
        sudo pacman -S --noconfirm "$1"

        if [[ "$?" == 0 ]]; then
            echo -e "\tSuccessfully installed $1!"
            return 0
        else
            echo -e "\tError! Could not install $1!"
            return 1
        fi
    else
        echo "$1 is already installed, skipping"
        return 0
    fi
}

pacaur_install() {
    if ! package_exists "$1"; then
        echo "> Installing AUR package $1..."
        pacaur -ya --noconfirm "$1"

        if [[ "$?" == 0 ]]; then
            echo -e "\tSuccessfully installed $1!"
            return 0
        else
            echo -e "\tError! Could not install $1!"
            return 1
        fi

        return "$?"
    else
        echo "$1 is already installed, skipping"
        return 0
    fi
}

aur_install() {
    echo "> Installing AUR package $1..."
    
    # Download
    curl -Lo package.tar.gz "https://aur.archlinux.org/cgit/aur.git/snapshot/$1.tar.gz"
    mkdir "pkg-$1" && tar xvf package.tar.gz -C "pkg-$1" --strip-components 1
    cd "pkg-$1"

    # Compile and install
    makepkg
    sudo pacman -U --noconfirm *.tar.xz

    # Clean up
    cd ..
    rm -rf "pkg-$1"
}

install_vim() {
    local stopinstall=0

    echo "> Installing vim"

    # Remove any already existing vim
    if package_exists vim; then
        echo -e "\tVim already exists as a package, removing..."
        sudo pacman -Rd --noconfirm vim &> /dev/null
    elif [ -f /usr/bin/vim ]; then
        read -rp "/usr/bin/vim exists, continue installing vim [y/N]? " response

        if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
            stopinstall=0
        else
            stopinstall=1
        fi
    fi

    if [ $stopinstall == 0 ]; then
        # Download
        if [ -d vim ]; then
            rm -rf vim
        fi

        git clone https://github.com/vim/vim

        # Install
        if [ -d vim ]; then
            cd vim

            cp "$CDIR/scripts/build-vim" .  chmod +x build-vim
            ./build-vim

            rm -rf *
            cd ..
            rmdir vim
        fi
    fi
}

install_packages() {
    echo "Installing packages..."
    pacman_install curl
    pacman_install git

    echo "Upgrading system..."
    sudo pacman -Syu --noconfirm &> /dev/null
    echo "Done!"

    if [ ! -d /tmp/linuxsetup ]; then
        mkdir /tmp/linuxsetup
    fi

    cd /tmp/linuxsetup

    # Pacaur
    if ! package_exists pacaur; then
        echo "> Installing pacaur"
        gpg --recv-keys 487EACC08557AD082088DABA1EB2638FF56C0C53
        pacman_install expac
        pacman_install yajl
        aur_install cower
        aur_install pacaur
	fi

    # Vim
    install_vim

    # Repo packages
    for pkg in "${repo_package_list[@]}"; do
        pacman_install "$pkg"
        
        if [[ $? != 0 ]]; then
            echo "Package installation aborted due to error"
            return 1
        fi
    done

    # AUR packages
    for pkg in "${aur_package_list[@]}"; do
        pacaur_install "$pkg"

        if [[ $? != 0 ]]; then
            echo "Package installation aborted due to error"
            return 1
        fi
    done

    # Clean up
    rm -rf /tmp/linuxsetup
}

export_setup() {
    echo "Exporting setup..."

    # Export scripts
    for f in ./scripts/export/*; do
        echo "> Exporting $(basename $f) setup!"
        sh "$f"

        if [[ $? == 0 ]]; then
            echo "Successfully exported $(basename $f) setup!"
        else
            echo "Error! Could not export $(basename $f) setup!"
        fi
    done
}

import_setup() {
    echo "Importing setup..."

    # Export scripts
    for f in ./scripts/import/*; do
        echo "> Importing $(basename $f) setup!"
        bash "$f"

        if [[ $? == 0 ]]; then
            echo "Successfully imported $(basename $f) setup!"
        else
            echo "Error! Could not import $(basename $f) setup!"
        fi
    done
}

echo "What do you want to do?"
select choice in "Install packages" "Export setup" "Import setup"
do
    case "$choice" in
        "Install packages")
            install_packages
            break
            ;;
        "Export setup")
            export_setup
            break
            ;;
        "Import setup")
            import_setup
            break
            ;;
        *)
            exit 1
            ;;
    esac
done
